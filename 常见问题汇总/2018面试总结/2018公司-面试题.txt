北京-触控科技前端面试题

1、xhtml 和 html具体有什么区别？
	
	答：主要区别就是XHTML要比HTML更加规范化。

	HTML4.01标准
		a、html标签必须是 root 根元素
		b、head 和 body 是html页面中 有且只有的元素。
		c、head 必须要有 meat title style（可选）
		d、body 的直接子元素只能是 block 块级元素
		e、block元素不能放在inline元素中、block元素不能放在 p 标签中。
		f、<ul>和<ol>中只能有<li>元素,但<li>里可以放其他，包括block元素
	
	XHTML1.0标准
		a、元素名必须是小写字母
		b、元素属性用"包围,不能为空值
		c、在内容里不能有&, 需要转义，包括其他特殊字符<>
		d、空元素以 />结尾 
		
2、前端页面有哪三层结构？ 分别是什么？ 什么作用？
	
	结构层： HTML的dom标记，用来编写页面所需的文本内容、图片、视频等
	
	行为层： JavaScript脚本嵌入，用来实现页面基本交互操作，动态的进行页面的增删改查。
	
	表现层： css层叠样式表，用来设置页面样式。布局。优化等作用。
	
3、HTML5 为什么只需要写 ！DOCTYPE HTML？

	a、声明位于位于HTML文档中的第一行，处于 标签之前。 
	b、告知浏览器的解析器用什么文档标准解析这个文档。 
	c、DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。
	
4、Doctype作用？标准模式和兼容模式各有什么区别？

	a、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。 
	b、在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。

5、请描述一下 cookies 、 sessionStorage 和 localStorage 的区别？
	分别介绍概念：
	cookie是传统的缓存机制。
		大小不到4kb
		在跨浏览器方面存储大小不一致。
		手动编写setItem和getItem方法
	sessionStorage 
		临时会话，页面关闭，本地存储消失。
		数据不能共享。
	localStorage 
		永久存储（可以手动删除数据）
		数据能够共享（两个窗口同时打开一个页面，数据能够共享）
	
	描述真正区别
	localStorage 和 sessionStorage 
		localStorage 和 sessionStorage ：存储限制都是 5M 大于cookie 的4kb。
		localStorage 和 sessionStorage ：客户端完成，不会请求服务器。而cookie则会在http头中夹杂着信息请求服务器。
		localStorage 和 sessionStorage ：相比于cookie，有自己封装好的 getItem 和 setItem方法，使用更方便。
	
6、如何实现浏览器内多个标签之间的通信？
	h5 websocket


7、什么是跨域？跨域请求资源的方法有哪些？
	说道跨域，就要知道同源策略，由于ajax的同源策略的限制。导致不同域名下的资源和数据无法请求成功。
	方法：
		a、使用script标签的src进行请求，传递callback=“对象名称”
		b、iframe 的 document.domain 跨域
		c、jquery jsonp跨域，需要些dataType:"jsonp"，jsonp:"callback"、jsonpCallback:"success",这三个参数。（常用）
		d、前端设置请求头，后台做代理。
	
	注意：jsonp跨域不支持post请求，只支持get
	https://www.cnblogs.com/chenshishuo/p/4919224.html

8、请写出几种IE6 BUG的解决方法？
	
9、页面导入样式时候，使用link和@import有什么区别？
10、ajax请求资源时，get和post有什么区别？
	
	a、get请求时，参数在url尾部显示。而post方式请求时，则不会显示出来。（在某些情况下，get方法会带来严重的安全性问题。）
	b、get请求发送的数据量小； post请求发送的数据量大。
	c、get请求需要注意缓存问题。 post请求不需要注意。
	
	使用场景：
		下面使用实例来表示Get请求和Post请求在发送同一段数据时的区别.
		与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
			然而，在以下情况中，请使用 POST 请求：
			a、无法使用缓存文件（更新服务器上的文件或数据库）
			b、向服务器发送大量数据（POST 没有数据量限制）
			c、发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠
	
11、ajax请求资源时，如何解释json数据？
	
	解释json数据就是，如果后台传过来的不是对象，而是字符串。我们需要自己转换。
	
	eval() 和 JSON.parse() 
	eval()并不安全，不会对字符串进行json格式的检查。
	JSON.parse() 比较安全，会检查是否满足json格式，如果符合则解析，反之不会进行解析。
	
	http://blog.csdn.net/h_elie/article/details/52493940
	
12、请写出验证身份证号的正则表达式？
	var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/


13、vue中 active-class是哪个组件的属性？嵌套路由怎么定义？



14、vue中 v-model是什么？ 怎么使用？ vue中标签怎么绑定事件？
	
	vue-model是双向数据绑定的意思。 （模型和视图之间的绑定）
	
	使用方法：
		多用于form表单，跟踪用户输入选择信息，封装传递后台，使用返回数据。
	
	vue绑定事件，使用v-on指令进行绑定。
	
15、mvvm框架是什么？ 它和其他框架（jquery）有什么区别？ 那些场景适合使用？
	


16、请详细说下你对vue生命周期的理解？
	
	//vue的整个执行过程就是生命周期，什么时间段执行那个方法，我们了解后知道根据不同的需求写在不同的地方
	beforeCreate:function(){
		alert("组件实例化之前执行的函数");
	} ,
	created:function(){
		alert("组件实例化完毕，但页面还未显示");//组件已经生成 dom还没生成 （vue组件 和 实例化完成）
	},
	beforeMount:function(){
		alert("组件挂载前，页面仍未显示，但虚拟dom已经配置");
	},
	mounted:function(){
		alert("组件挂载后，此方法执行后，页面显示（渲染Dom）");  //交互 在这里进行
	},
	beforeUpdate:function(){
		alert("组件更新（改变）前，页面仍未更新，但虚拟dom已经配置");
	},
	updated:function(){
		alert("组件更新（改变）（重新渲染Dom），此方法执行后，页面显示");
	},
	beforeDestory:function(){
		alert("组件销毁前");
	},
	destoryed:function(){
		alert("组件销毁");
	}
	
17、请说下具体使用vue的理解？
	
	a、vue是一个渐进式的JavaScript框架。注重于视图层。vue中的核心语法大致包括：
		  vue指令：用来动态更新html的状态。
		  vue事件：动态触发用户操作的作用。
		  vue路由：异步刷新的编写页面跳转。
		  vue服务：使用$http服务模块，进行前后台交互，制作响应页面。
		  vue组件：将项目拆分开来，有利于项目后期的维护，和组件的复用。
	
18、vue组件是怎么定义的？ 父组件怎么给子组件传值？
	
	a、定义一个组件
		
		// dom
		<div id="example">
		  <my-component></my-component>
		</div>
		
		// 注册
		Vue.component('my-component', {
		  template: '<div>A custom component!</div>'
		})

		// 创建根实例
		new Vue({
		  el: '#example'
		})
	
	 b、父组件通过 v-bind绑定属性，属性值为传递的数据。子组件中使用props接收。
	
19、ajax技术体系的组成部分有哪些？
	 JavaScript、
	 CSS（层叠样式表）、
	 DOM（文档对象模型）、
	 XMLHttpRequest 
	 是构成Ajax技术体系的四个技术基石，其中前三者合在一起以前称为DHTML。
	
	
20、ajax都有哪些优缺点？
	优点：
	<1>.无刷新更新数据：
	<2>.异步与服务器通信。
	<3>.界面与应用分离。
	<4>.界面与应用分离。
	缺点：	
	<1>AJAX的安全问题：开发者对数据不进行加密的情况下，容易受到黑客的攻击。
	<2>对搜索引擎支持较弱:AJAX会增大网络数据的流量，降低性能。
	<3>AJAX不能很好支持移动设备:一些手持设备（如手机、PDA等）现在还不能很好的支持Ajax

21、vue的全家桶了解吗？

22、js面向对象
	a、原理：js面向对象其实就是java类的思想。 本质上对于开发是 设计模式（编写对象的方式） 的选择。JavaScript有好多种设计模式。例如 传统的 函数式编程。
	
	b、面向对象有几种创建方式。其中的优缺点为
		第一种：原始模式创建方式
			var obj = new Object();
			obj.name = "王维璋";
			obj.sex = "男";
			obj.showName = function(){
				alert(this.name);
			}
			obj.showName();
			
			缺点：
				1、创建一个对象，写的是死的属性值和方法;
				2、如果创建多个对象，会造成强烈的代码冗余。麻烦
				3、如果有很多个对象，并不能快速清楚的看出，这些对象之间的联系。
		
		第二种：工厂方式创建对象
			function createPerson(name , sex){ 
				var obj = new Object();
				obj.name = name;
				obj.sex = sex;
				obj.showName = function(){
					alert(this.name);
				}
				return obj; 
			}
			var person1 = createPerson("Blue" , "男");
			person1.showName();
			
			总结: 工厂方式相比原始模式，在创建对个对象的时候，已经解决了代码冗余的问题。
				  但是，没有使用new操作符，我们没法实现真正的继承，封装，不浪费内存。
			
		第三种：构造函数方法创建对象
			function createPerson(name , sex){   //构造函数
				this.name = name;
				this.sex = sex;
				
				this.showName = function(){
					alert(this.name);
				}
			}
			
			var person1 =new createPerson("Blue" , "男");
			var person2 =new createPerson("Top" , "女");
			
			总结：1、使用了new操作符解决了 在这里我们都可以通过this统一指向当前实例化对象。
				  2、也解决了，没有使用new操作符的缺点。
				  3、但是 两个实例对象的相同方法，还是属于两块不同的地址，所以浪费资源内存的缺陷还是没有解决
				  
		第四种：原型和构造函数混合法创建对象
			function createPerson(name , sex){   //构造函数
				this.name = name;
				this.sex = sex;
			}
			createPerson.prototype.showName = function(){
				alert(this.name);
			}
			
			var person1 =new createPerson("Blue" , "男");
			person1.showName();
			
			总结：
			    我们每生成一个函数，他都会有一个prototype属性，指向他的原型对象。我们在这个原型对象上绑定需要的方法和属性。在原型对象上通过constructor指回原来的构造函数。最后我们需要使用的话，使用new操作符实例化构造函数对象，就能共享原型对象的属性和方法。
		
			原型：我们每生成一个函数，他都会有一个prototype属性，指向他的原型对象。我们在这个原型对象上绑定需要的方法和属性。在原型对象上通过constructor指回原来       的构造函数。最后我们需要使用的话，使用new操作符实例化构造函数对象，就能共享原型对象的属性和方法。
			原型链：我们的构造函数的prototype属性指向原型对象，原型对象又指回构造函数，我们使用的时候实例化构造函数，就能继承原型上的属性和方法，这个过程就是原型链。
			
			
			
		面向对象面试总结：
		
			面向对象有几种创建方式，
				第一种object创建，代码冗余。
				第二种是工厂模式创建，没法继承和封装，浪费内存。
				第三种是构造函数创建，使用this指向实例化的对象。但是多个实例化的地址引用不是一个。
				第四种：原型和构造函数的方式结合。这样一来，动态的属性写在构造函数里，方法绑定到原型上。可以共用方法。
				
			原型：	我们每生成一个函数，他都会有一个prototype属性，指向他的原型对象。我们在这个原型对象上绑定需要的方法和属性。在原型对象上通过constructor指回原来的构造函数。最后我们需要使用的话，使用new	操作符实例化构造函数对象，就能共享原型对象的属性和方法。

			原型链：
				原型指向、对象实例化使用的过程就是原型链。			