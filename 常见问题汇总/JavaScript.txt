（1）、js获取数组最大值和最小值
	使用apply方法：

		var a = [1,2,3,5];

		console.log(Math.max.apply(null, a));//最大值

		console.log(Math.min.apply(null, a));//最小值

（2）、js 获取 当前日期和三十天以前日期
		
		//获取当前日期
		var myDate = new Date();
		var nowY = myDate.getFullYear();
		var nowM = myDate.getMonth()+1;
		var nowD = myDate.getDate();
		var enddate = nowY+"-"+(nowM<10 ? "0" + nowM : nowM)+"-"+(nowD<10 ? "0"+ nowD : nowD);//当前日期

		//获取三十天前日期
		var lw = new Date(myDate - 1000 * 60 * 60 * 24 * 30);//最后一个数字30可改，30天的意思
		var lastY = lw.getFullYear();
		var lastM = lw.getMonth()+1;
		var lastD = lw.getDate();
		var startdate=lastY+"-"+(lastM<10 ? "0" + lastM : lastM)+"-"+(lastD<10 ? "0"+ lastD : lastD);//三十天之前日期
		
		/*
（3）、js中从一个对象解析出字符串stringify()、从一个字符串中解析出json对象parse
		var a = {a:1,b:2}
		
		结果：
		
		JSON.stringify(a)
		
		"{"a":1,"b":2}"

		parse用于从一个字符串中解析出json对象,如
		
		var str = '{"name":"huangxiaojian","age":"23"}'
		结果：
		JSON.parse(str)

		Object

		age: "23"
		name: "huangxiaojian"
		__proto__: Object

		注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。

（4）、js获取当前月的第一天 和 当前月today日期
		
		//当前月第一天
		function getCurrentMonthFirst(){
			 var date=new Date();
			     date.setDate(1);
			 var str="";
			 str+= date.getFullYear()+"-"+(date.getMonth()+1)+"-"+(date.getDate()<10 ? "0"+date.getDate() : date.getDate());
			 return str;
		}
		//today日期
		function getCurrentMonthTodat(){
			 var date=new Date();
			 var str="";
			 str+= date.getFullYear()+"-"+(date.getMonth()+1)+"-"+(date.getDate()<10 ? "0"+date.getDate() : date.getDate());			
			 return str;
		}
		
		console.log(getCurrentMonthFirst());//xxx-xxx-01   eg:2017-11-01
		console.log(getCurrentMonthTodat());//xxx-xxx-xxx  eg:2017-11-13

（5）、js Math对象
		Math.ceil(x);
			//返回x向上取整后的整数值.
		Math.floor(x);
			//返回x向下取整后的整数值.。
		Math.round(x);
			//返回四舍五入后的整数.
		Math.abs(x)
			//返回x的绝对值.传入一个非数字形式的字符串或者 undefined/empty 变量，将返回 NaN。传入 null 将返回 0。
		Math.log(x)
			//返回一个数的自然对数，如果指定的 number 为负数，则返回值为 NaN。
		Math.max([x[,y[,…]]])
			//返回0个到多个数值中最大值。
			//如果没有参数，则结果为 - Infinity。
			//如果有任一参数不能被转换为数值，则结果为 NaN。
		Math.min([x[,y[,…]]])
			//返回0个到多个数值中最小值，Math.min 经常用于裁剪一个值，以便使其总是小于或等于某个边界值
			//如果没有参数，则结果为 Infinity。
			//如果有任一参数不能被转换为数值，则结果为 NaN。
		Math.pow(x,y)
			//返回x的y次幂.
		Math.random()
			//返回0到1之间的伪随机数（大于等于0，小于1），以当前时间为随机数种子
		Math.floor(Math.random() * (max - min + 1) + min); 
			// 返回一个介于min和max之间的整型随机数
		
（6）、js字符串长度判断，超出进行自动截取（支持中文）

		/** 
	     * GetLength 检测中英文输入字符串的字节长度 此方法适用于 中英文的字节长度检测 并返回
	     * 			  可用来进行判断
	     * @param str 需要进行检测的参数
	     */
	    function GetLength(str) {
	        ///<summary>获得字符串实际长度，中文2，英文1</summary>
	        ///<param name="str">要获得长度的字符串</param>
	        var realLength = 0, len = str.length, charCode = -1;
	        for (var i = 0; i < len; i++) {
	            charCode = str.charCodeAt(i);
	            if (charCode >= 0 && charCode <= 128) realLength += 1;
	            else realLength += 2;
	        }
	        return realLength;
	    };
	
	
	    //js截取字符串，中英文都能用  
	    //如果给定的字符串大于指定长度，截取指定长度返回，否者返回源字符串。  
	    //字符串，长度  
	    /** 
	     * js截取字符串，中英文都能用 
	     * @param str：需要截取的字符串 
	     * @param len: 需要截取的长度 
	     */
	    function cutstr(str, len) {
	        var str_length = 0;
	        var str_len = 0;
	        str_cut = new String();
	        str_len = str.length;
	        for (var i = 0; i < str_len; i++) {
	            a = str.charAt(i);
	            str_length++;
	            if (escape(a).length > 4) {
	                //中文字符的长度经编码之后大于4  
	                str_length++;
	            }
	            str_cut = str_cut.concat(a);
	            if (str_length >= len) {
	                str_cut = str_cut.concat("...");
	                return str_cut;
	            }
	        }
	        //如果给定字符串小于指定长度，则返回源字符串；  
	        if (str_length < len) {
	            return str;
	        }
	    }
		$(function () { 
		//限制输入长度
	     $("input[name=username]").bind('keyup', function () {
		      if (GetLength($(this).val()) > 10) { 
		       $(this).val(cutstr($(this).val(), 10)); 
		       return; 
		     } 
	  	}); 
	  	
	  	//对已有字符串进行处理 在替换标记显示
	  	var strrr = "how old are you? can I help you? yes! I have you help me! thanks!"
	  	if(GetLength(strrr) > 20){
	  		var newStr = cutstr(strrr, 20);
	  		$(".strLength").html(newStr);
	  	}
	}); 

（7）、js数组从大倒下排序
	a、非重复元素数组
		function mySort1(arr){
			arr.sort(); //从小到大排序
			arr.reverse();//反转
			var newArr = arr;
			return arr;
		}
		
		mySort1([2,3,6,1,7,8,9]) //eg: [9,8,7,6,3,2,1]
	
	b、多个相同元素值得数组
		function mySort(arr){
			for(var i = 0; i < arr.length; i++){
				for (var j = i + 1; j < arr.length; j++){
					var p;
					if (arr[i] < arr[j]){
						p = arr[i];
						arr[i] = arr[j];
						arr[j] = p;
					}
				}
			}
			return arr;
		}
		
		mySort([1,1,1,2,2,2,3,3,3,4,4,4,55,66,55,66])  //eg: [66,66,55,55,4,4,4,3,3,3,2,2,2,1,1,1]
		
（8）、JavaScript开发规范
	https://www.cnblogs.com/polk6/p/4660195.html
	
（9）、js事件兼容性问题（冒泡、默认动作，绑定事件、事件对象）
		event事件问题（获取触发事件的对象dom元素）：
			e=ev||window.event;
		监听事件
			通过addEventListener兼容w3c主流..
			通过attachEvent兼容IE...
		js阻止默认事件
			e.preventDefault();//W3C标准  、  e.returnValue='false';//IE..
		阻止事件冒泡 ;
			e.stopPropagation();//W3C标准   、    e.cancelBubble=true;//IE....

